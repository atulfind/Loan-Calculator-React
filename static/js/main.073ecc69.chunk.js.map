{"version":3,"sources":["components/LeftSideBar/index.js","components/MainBox/index.js","App.js","serviceWorker.js","index.js"],"names":["LeftSideBar","shouldUpdade","useState","state","setstate","useEffect","history","localStorage","getItem","JSON","parse","className","reverse","map","index","key","amount","months","interestRate","monthlyPayment","numPayments","MainBox","url","removeItem","abortController","AbortController","fetch","signal","then","response","json","responseJson","obj","addToLocalStorageArray","catch","err","abort","name","value","existing","push","setItem","stringify","Fragment","maxValue","minValue","onChange","formatLabel","val","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.073ecc69.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './index.scss';\n\nconst LeftSideBar = ({shouldUpdade}) => {\n  const [state, setstate] = useState([])\n\n  useEffect(() => {\n    let history = localStorage.getItem('history');\n    if(history){\n      setstate(JSON.parse(history));\n    }\n  }, [shouldUpdade]);\n\n\n  return (\n    <section className=\"left-bar\">\n      <div className=\"header-fixed\">\n        <h4>History</h4>\n      </div>\n      <ul className=\"history\">\n       {\n         state.reverse().map((history, index)=> {\n           return(\n            <li className=\"row\" key={index}>\n              <div className=\"input-values col-2\">\n                <div className=\"\">\n                  <div className=\"title\">Loan Amount</div>\n                  <div className=\"sub-title\">{history.amount}</div>\n                </div>\n                <div className=\"\">\n                  <div className=\"title\">Number of Months</div>\n                  <div className=\"sub-title\">{history.months}</div>\n                </div>\n              </div>\n              <ul className=\"interest-details col-2\">\n                <li className=\"col-3\">\n                  <div className=\"title\">Rate</div>\n                  <div className=\"sub-title\">{history.interestRate}</div>\n                </li>\n                <li className=\"col-3\">\n                  <div className=\"title\">Monthly Payment</div>\n                  <div className=\"sub-title\">{history.monthlyPayment}</div>\n                </li>\n                <li className=\"col-3\">\n                  <div className=\"title\">NOS Payment</div>\n                  <div className=\"sub-title\">{history.numPayments}</div>\n                </li>\n              </ul>\n            </li>\n           )\n         })\n        }\n      </ul>\n    </section>\n  )\n}\n\nexport default LeftSideBar;\n","import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport './index.scss';\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\";\nimport LeftSideBar from '../LeftSideBar';\n\nconst MainBox = () => {\n\n  const [state, setstate] = useState({\n    amount: 500,\n    months: 6,\n    interestRate: 0,\n    monthlyPayment: 0,\n    numPayments: 0\n  });\n\n  const url = `https://ftl-frontend-test.herokuapp.com/interest?amount=${state.amount}&numMonths=${state.months}`;\n\n  useEffect(() => {\n    localStorage.removeItem('history');\n  }, [])\n\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    fetch(url, { signal: abortController.signal })\n      .then(response => response.json())\n      .then(responseJson => {\n        const obj = {\n          interestRate: +responseJson.interestRate,\n          monthlyPayment: +responseJson.monthlyPayment.amount,\n          numPayments: +responseJson.numPayments\n        }\n        setstate({ ...state, ...obj });\n        addToLocalStorageArray('history', { ...state, ...obj });\n      }).catch(err => {\n\n      })\n    return () => {\n      abortController.abort();\n    };\n  }, [url]);\n\n  var addToLocalStorageArray = (name, value) => {\n    let existing = localStorage.getItem(name);\n    existing = existing ? JSON.parse(existing) : [];\n    existing.push(value);\n    localStorage.setItem(name, JSON.stringify(existing));\n  }\n\n  return (\n    <React.Fragment>\n      <LeftSideBar shouldUpdade={state.monthlyPayment} />\n      <main className=\"main\">\n        <div className=\"input-form\">\n          <form>\n            <div className=\"form-group\">\n              <InputRange\n                maxValue={5000}\n                minValue={500}\n                value={state.amount}\n                onChange={amount => setstate({ ...state, amount })}\n                formatLabel={(val)=> `$${val}`}\n              />\n              <label>Loan Amount</label>\n            </div>\n            <div className=\"form-group\">\n              <InputRange\n                maxValue={24}\n                minValue={6}\n                value={state.months}\n                onChange={months => setstate({ ...state, months: months })}\n              />\n              <label>Loan Duration (in months)</label>\n            </div>\n          </form>\n          <div className=\"current-status\">\n            <h4>Interest Details</h4>\n            <div className=\"row\">\n              <div className=\"col-2\"> Interest Rate  </div>\n              <div className=\"col-2\"> {`$ ${state.interestRate}`} </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-2\"> Monthly Payment  </div>\n              <div className=\"col-2\"> {`$ ${state.monthlyPayment}`} </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-2\"> Number of Payments  </div>\n              <div className=\"col-2\"> {state.numPayments} </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </React.Fragment>\n  )\n}\n\nexport default MainBox;\n","import React from 'react';\nimport './App.scss';\nimport MainBox from './components/MainBox';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n     <MainBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}